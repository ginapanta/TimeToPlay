<?php

namespace Gina\TestBundle\Entity;

use Doctrine\ORM\Mapping as ORM;
use Gina\UserBundle\Entity\User;
use Symfony\Component\Validator\Constraints as Assert;
use PUGX\MultiUserBundle\Validator\Constraints\UniqueEntity;

/**
 * @ORM\Entity
 * @ORM\Table(name="musiciens")
 * @UniqueEntity(fields = "username", targetClass = "Gina\UserBundle\Entity\User", message="fos_user.username.already_used")
 * @UniqueEntity(fields = "email", targetClass = "Gina\UserBundle\Entity\User", message="fos_user.email.already_used")
 *
 * @ORM\Entity(repositoryClass="Gina\TestBundle\Entity\MusiciensRepository")
 */
class Musiciens extends User
{
   /**
     * @ORM\Id
     * @ORM\Column(type="integer")
     * @ORM\GeneratedValue(strategy="AUTO")
     */
    protected $id;

    /**
     * @var string
     *
     * @ORM\Column(name="artistName", type="string", length=255)
     */
    private $artistName;

    /**
     * @var string
     *
     * @ORM\Column(name="biographie", type="string", length=255,nullable=true)
     */
    private $biographie;

    /**
     * @var string
     *
     * @ORM\Column(name="influences", type="string", length=255,nullable=true)
     */
    private $influences;

  

  /**
     * @ORM\Column(type="string", length=255, nullable=true)
     */
    private $path;
    
    
    /**
     * @Assert\File(maxSize="6000000")
     */
    public $file;

    
    // propriété utilisé temporairement pour la suppression
    private $filenameForRemove;

    
        
    
    /**
     * 
     * @ORM\OneToMany(targetEntity="Gina\TestBundle\Entity\Medias", mappedBy="musiciens")
     */   
    private $medias;
    
   
    
     /**
     * @ORM\ManyToMany (targetEntity="Gina\TestBundle\Entity\Favoris", mappedBy="musiciens")
     */
    protected $favoris;
    
    
 

    /**
     * Get id
     *
     * @return integer 
     */
    public function getId()
    {
        return $this->id;
    }

   

    /**
     * Set biographie
     *
     * @param string $biographie
     * @return Musiciens
     */
    public function setBiographie($biographie)
    {
        $this->biographie = $biographie;

        return $this;
    }

    /**
     * Get biographie
     *
     * @return string 
     */
    public function getBiographie()
    {
        return $this->biographie;
    }

    /**
     * Set influences
     *
     * @param string $influences
     * @return Musiciens
     */
    public function setInfluences($influences)
    {
        $this->influences = $influences;

        return $this;
    }

    /**
     * Get influences
     *
     * @return string 
     */
    public function getInfluences()
    {
        return $this->influences;
    }

 

   public function getAbsolutePath()
    {
        return null === $this->path ? null : $this->getUploadRootDir().'/'.$this->path;
    }

    public function getWebPath()
    {
        return null === $this->path ? null : $this->getUploadDir().'/'.$this->path;
    }

    protected function getUploadRootDir()
    {
        // le chemin absolu du répertoire où les documents uploadés doivent être sauvegardés
        return __DIR__.'/../../../../web/'.$this->getUploadDir();
    }

    protected function getUploadDir()
    {
        // on se débarrasse de « __DIR__ » afin de ne pas avoir de problème lorsqu'on affiche
        // le document/image dans la vue.
        return 'uploads/img';
    }
    
    
  
    
    /**
     * @ORM\PrePersist()
     * @ORM\PreUpdate()
     */
    public function preUpload()
    {
        if (null !== $this->file) {
            $this->path = $this->file->guessExtension();
        }
    }


    
    /**
     * @ORM\PostPersist()
     * @ORM\PostUpdate()
     */
    public function upload()
    {
        if (null === $this->file) {
            return;
        }

        // vous devez lancer une exception ici si le fichier ne peut pas
        // être déplacé afin que l'entité ne soit pas persistée dans la
        // base de données comme le fait la méthode move() de UploadedFile
        $this->file->move($this->getUploadRootDir(), $this->id.'.'.$this->file->guessExtension());

        unset($this->file);
    }

    /**
     * @ORM\PreRemove()
     */
    public function storeFilenameForRemove()
    {
        $this->filenameForRemove = $this->getAbsolutePath();
    }

    
    /**
     * @ORM\PostRemove()
     */
    public function removeUpload()
    {
        if ($this->filenameForRemove) {
            unlink($this->filenameForRemove);
        }
    }



    
    /**
     * Constructor
     */
    public function __construct()
    {
         parent::__construct(); 
          
        $this->medias = new \Doctrine\Common\Collections\ArrayCollection();
     
      
    }
    

    /**
     * Add medias
     *
     * @param \Gina\TestBundle\Entity\Medias $medias
     * @return Musiciens
     */
    public function addMedia(\Gina\TestBundle\Entity\Medias $medias)
    {        
        $this->medias[] = $medias;   
        
        $medias->setMusiciens($this);

        return $this;
       
    }

    /**
     * Remove medias
     *
     * @param \Gina\TestBundle\Entity\Medias $medias
     */
    public function removeMedia(\Gina\TestBundle\Entity\Medias $medias)
    {
        $this->medias->removeElement($medias);
    }

    /**
     * Get medias
     *
     * @return \Doctrine\Common\Collections\Collection 
     */
    public function getMedias()
    {
        return $this->medias;
    }

    



    /**
     * Set artistName
     *
     * @param string $artistName
     * @return Musiciens
     */
    public function setArtistName($artistName)
    {
        $this->artistName = $artistName;

        return $this;
    }

    /**
     * Get artistName
     *
     * @return string 
     */
    public function getArtistName()
    {
        return $this->artistName;
    }

    /**
     * Set path
     *
     * @param string $path
     * @return Musiciens
     */
    public function setPath($path)
    {
        $this->path = $path;

        return $this;
    }

    /**
     * Get path
     *
     * @return string 
     */
    public function getPath()
    {
        return $this->path;
    }

   
    /**
     * @var \DateTime
     */
    protected $dateInscription;

    /**
     * @var string
     */
    protected $lieu;

   


    /**
     * Set dateInscription
     *
     * @param \DateTime $dateInscription
     * @return Musiciens
     */
    public function setDateInscription($dateInscription)
    {
        $this->dateInscription = $dateInscription;

        return $this;
    }

    /**
     * Get dateInscription
     *
     * @return \DateTime 
     */
    public function getDateInscription()
    {
        return $this->dateInscription;
    }

    /**
     * Set lieu
     *
     * @param string $lieu
     * @return Musiciens
     */
    public function setLieu($lieu)
    {
        $this->lieu = $lieu;

        return $this;
    }

    /**
     * Get lieu
     *
     * @return string 
     */
    public function getLieu()
    {
        return $this->lieu;
    }

    /**
     * Add favoris
     *
     * @param \Gina\TestBundle\Entity\Favoris $favoris
     * @return Musiciens
     */
    public function addFavori(\Gina\TestBundle\Entity\Favoris $favoris)
    {
        $this->favoris[] = $favoris;

        return $this;
    }

    /**
     * Remove favoris
     *
     * @param \Gina\TestBundle\Entity\Favoris $favoris
     */
    public function removeFavori(\Gina\TestBundle\Entity\Favoris $favoris)
    {
        $this->favoris->removeElement($favoris);
    }

    /**
     * Get favoris
     *
     * @return \Doctrine\Common\Collections\Collection 
     */
    public function getFavoris()
    {
        return $this->favoris;
    }


}
